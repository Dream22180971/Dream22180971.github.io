<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【软测入门】第2章  测试过程</title>
    <link href="/2023/03/16/%E3%80%90%E8%BD%AF%E6%B5%8B%E5%85%A5%E9%97%A8%E3%80%91%E7%AC%AC2%E7%AB%A0%20%20%E6%B5%8B%E8%AF%95%E8%BF%87%E7%A8%8B/"/>
    <url>/2023/03/16/%E3%80%90%E8%BD%AF%E6%B5%8B%E5%85%A5%E9%97%A8%E3%80%91%E7%AC%AC2%E7%AB%A0%20%20%E6%B5%8B%E8%AF%95%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="2-1-软件测试阶段"><a href="#2-1-软件测试阶段" class="headerlink" title="2.1 软件测试阶段"></a>2.1 软件测试阶段</h2><p><img src="C:\Users\Qiaoh\AppData\Roaming\Typora\typora-user-images\image-20230218203522861.png" alt="image-20230218203522861"></p><p><strong>验收测试</strong></p><p><strong>1．α测试</strong></p><p>　　α测试是用户在开发环境下进行的测试，也可以是开发机构内部的用户在模拟环境下进行的测试。α测试中，软件在一个自然状态下使用。开发者坐在用户旁，随时记下错误和使用中的问题。这是在受控制的环境下进行的测试。α测试的目的主要是评价软件产品的功能、局域化、可用性、可靠性、性能、支持性（Function，Localization，Usability，Reliability，Performance，Support，FLURPS），尤其注重产品的界面和特色。α测试人员是除产品研发人员之外最早见到产品的人，他们提出的功能和修改建议是很有价值的。</p><p><strong>2．β测试</strong></p><p>　　β测试是软件的多个用户在一个或多个用户的实际使用环境下进行的测试。这些用户是与公司签订了支持产品预发行合同的外部用户，他们要求使用该产品，并愿意返回所有错误信息给开发者。与α测试不同的是，在进行β测试时，开发者通常不在测试现场。因而，β测试是在开发者无法控制的环境下进行的软件现场应用。</p><p>　　在β测试中，由用户<a href="javascript:;"><strong>记录</strong></a>下遇到的所有问题，包括真的和主观认定的，定期向开发者报告；开发者在综合用户的报告后做出修改，再将软件产品交付给全体用户使用。</p><p><strong>单元测试、集成测试、系统测试的比较</strong></p><p><img src="C:\Users\Qiaoh\AppData\Roaming\Typora\typora-user-images\image-20230218205108011.png" alt="image-20230218205108011"></p><p><strong>回归测试</strong></p><p>在测试或其他活动中发现的缺陷经过修改后，应该对软件进行回归测试。回归测试的目的是验证缺陷得到了正确的修复，同时对系统的变更没有影响到以前的功能。回归测试可以发生在任何一个阶段，包括单元测试、集成测试、系统测试。</p><p><img src="C:\Users\Qiaoh\AppData\Roaming\Typora\typora-user-images\image-20230218205616020.png" alt="image-20230218205616020"></p><p><strong>1．回归测试的策略</strong></p><p>　　如果回归测试需要考虑如何选择重新执行的测试用例，就要确定回归测试的策略。常见的回归测试策略如下。</p><p>　　●完全重复测试：重新执行所有在前期测试阶段建立的测试用例，以确认问题修改的正确性和修改的局部影响性。</p><p>　　●选择性重复测试：选择性地重新执行部分在前期测试阶段建立的测试用例，以测试被修改的程序。具体细分如下。</p><p>　　■覆盖修改法：针对被修改的部分，选取或重新构造测试用例以验证没有错误再次发生的用例选择方法。也就是说，这类回归测试仅根据修改的内容来选择测试用例，这部分测试用例仅保证修改的缺陷或新增的功能实现了。这种方法的效率是最高的，但风险是最大的，因为它无法保证这个修改是否影响了其他功能。在进度压力很大或者系统结构设计耦合性很小的状态下，可以使用该方法。</p><p>　　■周边影响法：不但要包含覆盖修改法确定的用例，还需要分析修改的扩散影响，对于那些受到修改间接影响的部分，选择测试用例以验证它没有受到不良影响。该方法比覆盖修改法更充分。这类回归测试需要分析当前的修改可能影响到哪部分代码或功能，对于所有受影响的功能和代码，对应的所有测试用例都将被回归。如何判断哪些功能或代码受影响依赖于开发过程的规范性和测试分析人员（或开发人员）的经验。对于开发过程有详细的需求跟踪矩阵的项目而言，在矩阵中分析修改功能所波及的代码区域或其他功能是比较简单的，同时有经验的开发人员和测试人员能够有效地找出受影响的功能或代码；对于单元测试而言，修改代码之后，还需要考虑对一些公共内容的影响，如全局变量、输入&#x2F;输出接口、配置文件等。该方法是业界推荐的方法，适合于一般项目。</p><p>　　■指标达成方法：一种类似于单元测试的方法，在重新执行测试前，先确定一个要达成的指标，如完全覆盖修改部分的代码、覆盖与修改有关的60%的接口等，基于这种要求，选择一个最小的测试用例集合。</p><p>　　<strong>2．回归测试流程</strong></p><p>　　回归测试也需要有流程，可参考如下流程。</p><p>　　（1）在测试策略制定阶段，制定回归测试策略。</p><p>　　（2）确定需要回归测试的版本。</p><p>　　（3）发布回归测试版本，按照回归测试策略执行回归测试。</p><p>　　（4）若回归测试通过，关闭缺陷跟踪单（问题单）。</p><p>　　（5）若回归测试不通过，把缺陷跟踪单返回开发人员，开发人员重新修改问题，再次提交测试人员，进行回归测试。</p><p>　　<strong>3．回归测试的自动化</strong></p><p>　　回归测试是一个重用以前成果的测试，很难预料到要经过多少次回归系统才能达到满意的水平，因此，回归测试将可能演变成一种重复的、令人心烦意乱的工作，效果与人员的积极性将大打折扣。于是，回归测试的自动化非常重要。</p><p>　　回归测试的自动化包括测试程序的自动运行、自动配置，测试用例的管理和自动输入，测试的自动执行，测试信息与结果的自动采集，测试结果的自动比较和结论（尤其前面提到的各类数据的共享决策）的自动输出。</p><p>　　对于系统测试功能比较简单、测试界面相对稳定并且测试用例良好的测试来说，采用“捕捉回放”工具是比较合适的，这类工具有<a href="javascript:;"><strong>QTP</strong></a>、Robot Framework、<a href="javascript:;"><strong>Selenium</strong></a>等。为了实现测试用例的自动化并实现测试结果的自动判断，脚本化的并且包含控制结构和内部实现结果判断的测试用例是唯一的选择，此类脚本语言有<a href="javascript:;"><strong>Python</strong></a>、<a href="javascript:;"><strong>Ruby</strong></a>、Java等。</p><p>　　对于特定系统中复杂的测试来说，如果没有通用的商用工具可供选择，可以尝试开发专用的<a href="javascript:;"><strong>自动化测试</strong></a>工具。</p><p>　　回归测试的自动化（或者说工具化）是一个需要尽早考虑的问题，在确定测试方案时就要考虑这种可能性，必要时应投入资源进行开发，形成可供继承与推广的工具则是最终目的。</p><hr><h2 id="2-2-测试过程模型"><a href="#2-2-测试过程模型" class="headerlink" title="2.2 测试过程模型"></a>2.2 测试过程模型</h2><p><strong>CMM（能力成熟度模型）</strong></p><p>角色（role）入口准则（entry criteria）输入（input）活动（activity）输出（output）出口准则（exit criteria）</p><p>评审和审计（review and audit）可管理和受控的工作产品（work product managed and controlled）</p><p>测量（measurement）书面规程（documented procedure）培训（training）工具（tool）</p><p><strong>双V模型</strong></p><p><img src="C:\Users\Qiaoh\AppData\Roaming\Typora\typora-user-images\image-20230218210734462.png" alt="image-20230218210734462"></p><hr><h2 id="2-3-软件开发与测试过中各环节的任务、角色及其职责"><a href="#2-3-软件开发与测试过中各环节的任务、角色及其职责" class="headerlink" title="2.3 软件开发与测试过中各环节的任务、角色及其职责"></a>2.3 软件开发与测试过中各环节的任务、角色及其职责</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">项目经理<br>开发工程师<br>测试工程师<br>开发经理<br>测试经理<br>质量保证人员QA<br>变更控制委员会CCB<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【软测入门】第1章  测试的基础知识</title>
    <link href="/2023/03/16/%E3%80%90%E8%BD%AF%E6%B5%8B%E5%85%A5%E9%97%A8%E3%80%91%E7%AC%AC1%E7%AB%A0%20%20%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2023/03/16/%E3%80%90%E8%BD%AF%E6%B5%8B%E5%85%A5%E9%97%A8%E3%80%91%E7%AC%AC1%E7%AB%A0%20%20%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1-1-软件测试简介"><a href="#1-1-软件测试简介" class="headerlink" title="1.1 软件测试简介"></a>1.1 软件测试简介</h2><p>软测定义：为了发现软件错误和缺陷（统称bug）而执行程序的一个过程。</p><h2 id="1-2-软件测试的目的和对象"><a href="#1-2-软件测试的目的和对象" class="headerlink" title="1.2 软件测试的目的和对象"></a>1.2 软件测试的目的和对象</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>（1）软件测试是为了发现错误而执行程序的过程。</p><p>（2）测试是为了证明程序有错，而不是证明程序无错误。 </p><p>（3）通过一个好的测试用例能发现至今未发现的错误。 </p><p>（4）一个成功的测试是发现了至今未发现的错误的测试。</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>在整个软件的生命周期中，各阶段有不同的测试对象，形成了不同开发阶段中不同类型的测试。</p><h2 id="1-3-软件测试的生命周期"><a href="#1-3-软件测试的生命周期" class="headerlink" title="1.3 软件测试的生命周期"></a>1.3 软件测试的生命周期</h2><p><strong>瀑布模型：</strong></p><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode"><span class="hljs-number">1.</span>计划阶段<br><span class="hljs-comment">(1)</span>确定软件开发总目标。<br><span class="hljs-comment">(2)</span>给出软件的功能、性能、可靠性及接口等方面的设想。<br><span class="hljs-comment">(3)</span>研究完成该项目的可行性，探讨问题的解决方案，<br><span class="hljs-comment">(4)</span>对可供开发使用的资源、成本、可取得的效益和开发进度作出评估。<br><span class="hljs-comment">(5)</span>制定完成开发任务的实施计划。<br><br><span class="hljs-number">2.</span>需求分析阶段<br>对开发的软件进行详细定义，由需求分析人员和用户共同讨论决定那些需求是可以满足的，并且给与确切的描述，写出SRS。<br><br><span class="hljs-number">3.</span>设计阶段<br>完成设计说明书，把各项需求转为体系结构，每一部分是功能明确的模块，对每个模块进行具体描述。<br><br><span class="hljs-number">4</span>）编码阶段<br>把软件设计转换成计算机可接受的程序，建立数据库。<br><br><span class="hljs-number">5</span>）测试阶段<br>由独立的小组开展测试，分为单元测试、集成测试、系统测试。<br><br><span class="hljs-number">6</span>）运行和维护阶段<br>将软件交付用户、正式投入使用，以后便进入维护阶段，对软件进行可能性的修改，比如修复软件错误、升级系统软件、增强软件功能、提高性能等。<br></code></pre></div></td></tr></table></figure><h2 id="1-4-软件开发的组织架构和流程"><a href="#1-4-软件开发的组织架构和流程" class="headerlink" title="1.4 软件开发的组织架构和流程"></a>1.4 软件开发的组织架构和流程</h2><p><strong>组织架构</strong> </p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">软件开发组：包括开发经理、分析人员、设计人员、开发人员<br>软件测试组：包括测试经理、测试人员<br>配置管理组：包括配置经理、配置管理员<br></code></pre></div></td></tr></table></figure><p><strong>流程</strong></p><h3 id="1-瀑布模型"><a href="#1-瀑布模型" class="headerlink" title="1.瀑布模型"></a>1.瀑布模型</h3><p><img src="C:\Users\Qiaoh\AppData\Roaming\Typora\typora-user-images\image-20230218142202506.png" alt="image-20230218142202506"></p><h3 id="2-螺旋模型"><a href="#2-螺旋模型" class="headerlink" title="2.螺旋模型"></a>2.螺旋模型</h3><p><img src="C:\Users\Qiaoh\AppData\Roaming\Typora\typora-user-images\image-20230218142444829.png" alt="image-20230218142444829"></p><h3 id="3-V模型"><a href="#3-V模型" class="headerlink" title="3.V模型"></a>3.V模型</h3><p><img src="C:\Users\Qiaoh\AppData\Roaming\Typora\typora-user-images\image-20230218142538396.png" alt="image-20230218142538396"></p><h3 id="4-W模型"><a href="#4-W模型" class="headerlink" title="4.W模型"></a>4.W模型</h3><p><img src="C:\Users\Qiaoh\AppData\Roaming\Typora\typora-user-images\image-20230218142647410.png" alt="image-20230218142647410"></p><h2 id="1-5-软件中出现缺陷的原因"><a href="#1-5-软件中出现缺陷的原因" class="headerlink" title="1.5 软件中出现缺陷的原因"></a>1.5 软件中出现缺陷的原因</h2><p><img src="C:\Users\Qiaoh\AppData\Roaming\Typora\typora-user-images\image-20230218144058255.png" alt="image-20230218144058255"></p><h2 id="1-6-软件缺陷的类型、严重性、优先级"><a href="#1-6-软件缺陷的类型、严重性、优先级" class="headerlink" title="1.6 软件缺陷的类型、严重性、优先级"></a>1.6 软件缺陷的类型、严重性、优先级</h2><p><strong>软件缺陷类型</strong></p><p><img src="C:\Users\Qiaoh\AppData\Roaming\Typora\typora-user-images\image-20230218144830290.png" alt="image-20230218144830290"></p><h3 id="软件缺陷的严重性和优先级"><a href="#软件缺陷的严重性和优先级" class="headerlink" title="软件缺陷的严重性和优先级"></a><strong>软件缺陷的严重性和优先级</strong></h3><p><strong>严重性</strong></p><p><img src="C:\Users\Qiaoh\AppData\Roaming\Typora\typora-user-images\image-20230218145741942.png" alt="image-20230218145741942"></p><p><strong>优先级</strong></p><p><img src="C:\Users\Qiaoh\AppData\Roaming\Typora\typora-user-images\image-20230218150307723.png" alt="image-20230218150307723"></p><h2 id="1-7-测试用例的定义"><a href="#1-7-测试用例的定义" class="headerlink" title="1.7 测试用例的定义"></a>1.7 测试用例的定义</h2><p><img src="C:\Users\Qiaoh\AppData\Roaming\Typora\typora-user-images\image-20230218150611528.png" alt="image-20230218150611528"></p><h2 id="1-8-测试执行的定义"><a href="#1-8-测试执行的定义" class="headerlink" title="1.8 测试执行的定义"></a>1.8 测试执行的定义</h2><p><img src="C:\Users\Qiaoh\AppData\Roaming\Typora\typora-user-images\image-20230218151455475.png" alt="image-20230218151455475"></p><h2 id="1-9-软测工程师的主要工作"><a href="#1-9-软测工程师的主要工作" class="headerlink" title="1.9 软测工程师的主要工作"></a>1.9 软测工程师的主要工作</h2><p><img src="C:\Users\Qiaoh\AppData\Roaming\Typora\typora-user-images\image-20230218151957211.png" alt="image-20230218151957211"></p><hr><p>未完待续..</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何利用Hexo搭建本博客平台</title>
    <link href="/2021/10/01/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/10/01/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="如何搭建本博客平台-Hexo-Github"><a href="#如何搭建本博客平台-Hexo-Github" class="headerlink" title="如何搭建本博客平台 Hexo+Github"></a>如何搭建本博客平台 Hexo+Github</h2><h3 id="一、Hexo是什么？"><a href="#一、Hexo是什么？" class="headerlink" title="一、Hexo是什么？"></a>一、Hexo是什么？</h3><p><a href="https://hexo.io/zh-cn/">Hexo</a>是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown 或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。即把用户的markdown文件，按照指定的主题解析成静态网页。</p><h3 id="二、为什么选择Hexo搭建博客？"><a href="#二、为什么选择Hexo搭建博客？" class="headerlink" title="二、为什么选择Hexo搭建博客？"></a>二、为什么选择Hexo搭建博客？</h3><p>建立这个博客的时间是21年9月份，正值考研的强化阶段，我在网上刷着帖子看到相关搭建博客的文章，就突然脑子一热，我也想拥有一个个人的博客平台网站，于是就花了3天时间在图书馆利用复习娱乐时间搞了一下。选择使用它主要也是因为操作简单，后期维护也不是很麻烦，还能发发自己的小吐槽，挺好。</p><h3 id="三、怎么从0到1搭建Hexo博客？"><a href="#三、怎么从0到1搭建Hexo博客？" class="headerlink" title="三、怎么从0到1搭建Hexo博客？"></a>三、怎么从0到1搭建Hexo博客？</h3><p>首先，我参考了B站上一个up的视频，堪称保姆级，对于入门小白来说，确实是跟着操作就好了。视频指路👉<a href="https://www.bilibili.com/video/BV1mU4y1j72n?share_source=copy_web%5D">点这里</a>。看完视频之后我了解了大致的搭建步骤。这里放入<a href="https://hexo.io/zh-cn/docs/">官方文档</a>作为首要参考，一切以文档为主。</p><h5 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h5><p>这个工具我课程里面因为用到过所以已经安装好了，没有的小伙伴的可以参考这篇文章进行安装及环境配置。指路👉<a href="https://blog.csdn.net/weixin_52799373/article/details/123840137">点这里</a>。</p><h5 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h5><p>下载及安装配置参考文章，指路👉<a href="https://blog.csdn.net/qq_57389560/article/details/124637026">点这里</a>。</p><h5 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h5><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>在文件夹里面鼠标右键Git Bash here，输入以下命令<br>$ npm install -g hexo-cli<br></code></pre></div></td></tr></table></figure><h5 id="4-初始化Hexo"><a href="#4-初始化Hexo" class="headerlink" title="4.初始化Hexo"></a>4.初始化Hexo</h5><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>在想要生成博客的一个空文件夹里面输入以下命令，进行初始化<br>hexo init<br></code></pre></div></td></tr></table></figure><p>随即空文件夹会自动生成初始化的内容文件，结构如图所示</p><p><img src="https://img.tujidu.com/image/6281f2c878f62.jpg" alt="初始化结构图"></p><p>到这里，其实本地化的Hexo页面其实已经生成了，下面来测试一下。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>输入以下命令打开本地服务器，静态生成本地博客<br>hexo s <br></code></pre></div></td></tr></table></figure><p>然后在浏览器输入以下地址,即可访问最初的Hexo页面。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">localhost</span>:<span class="hljs-number">4000</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img.tujidu.com/images/2023/03/15/6411dbf4150c9.png" alt="初始化页面"></p><p>这也其实就搭建好了，然后的话就是上传到Github或Gitee服务器。后续更新…</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
